<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nancy&#39;s Blog</title>
  
  <subtitle>Nancy.top</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-17T09:28:09.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Nancy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构训练1</title>
    <link href="http://example.com/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%AD%E7%BB%831/"/>
    <id>http://example.com/2023/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%AD%E7%BB%831/</id>
    <published>2023-09-17T05:51:53.000Z</published>
    <updated>2023-09-17T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构训练1"><a href="#数据结构训练1" class="headerlink" title="数据结构训练1"></a>数据结构训练1</h1><h2 id="数据结构的基础知识"><a href="#数据结构的基础知识" class="headerlink" title="数据结构的基础知识"></a>数据结构的基础知识</h2><h3 id="数据结构的分类"><a href="#数据结构的分类" class="headerlink" title="数据结构的分类"></a>数据结构的分类</h3><ol><li>常见的数据结构可分为「线性数据结构」与「非线性数据结构」，具体为：「数组」、「链表」、「栈」、「队列」、「树」、「图」、「散列表」、「堆」。<br><img src="https://img-blog.csdnimg.cn/20200613091501524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70"></li></ol><h5 id="之前写过的相关的数据结构的文章连接："><a href="#之前写过的相关的数据结构的文章连接：" class="headerlink" title="之前写过的相关的数据结构的文章连接："></a>之前写过的相关的数据结构的文章连接：</h5><ol><li><a href="https://yidunchiqiwanban.github.io/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%831" target="_blank">栈</a></li><li><a href="https://yidunchiqiwanban.github.io/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%832" target="_blank">队列</a></li><li><a href="https://yidunchiqiwanban.github.io/2023/08/16/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%835" target="_blank">链表</a></li><li><a href="https://yidunchiqiwanban.github.io/2023/08/18/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%836/" target="_blank">哈希表</a></li><li><a href="https://yidunchiqiwanban.github.io/2023/08/21/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%837/" target="_blank">二叉树</a></li></ol><h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2><ol><li><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/50c26h/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                stringBuilder.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stringBuilder.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>当字符串为空时，直接返回。若不为空，创建一个stringBuilder，遍历字符串，遇到空格，在stringBuilder中添加一个”%20”，否则将字符拼接上，最后返回。</p></blockquote><h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h2><ol><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/5dt66m/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/5d8831/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.add(pre.val);</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[stack.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            res[index++] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用ListNode来充当指针，创建一个栈，当指针指向的位置不为空时，不断遍历，并将值都放入栈，最后创建一个为栈的大小的数组，逐步弹出栈中元素放入数组，因为栈是先进后出，所以达到效果。</p></blockquote><h2 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a>剑指 Offer 09. 用两个栈实现队列</h2><ol><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/5d3i87/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/5dq0t5/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Integer&gt; list1;</span><br><span class="line">    LinkedList&lt;Integer&gt; list2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        list1.addLast(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!list2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> list2.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!list1.isEmpty())&#123;</span><br><span class="line">            list2.addLast(list1.removeLast());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list2.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>我这里是用两个集合，队列的特点是先进先出，当添加元素时，在第一个有序集合后面添加，当要删除时，判断弹出有序集合里面是否有元素，有就弹出最后一个，若无，且第一个集合内无元素，就证明无可删除元素，返回-1；若第一个集合里面还有元素，那么便在第二个集合里面添加第一个集合所有元素然后第一个集合删除该元素，最后返回第二个集合最后的元素。比如，现在list1有1，2，3，然后我们要删除第一个元素，那么就将list1的元素逐步放入list2，也就是3，2，1，最后list2删除最后的元素。</p></blockquote><h2 id="剑指-Offer-30-包含-min-函数的栈"><a href="#剑指-Offer-30-包含-min-函数的栈" class="headerlink" title="剑指 Offer 30. 包含 min 函数的栈"></a>剑指 Offer 30. 包含 min 函数的栈</h2><ol><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/50bp33/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/50je8m/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;Integer&gt; list1;</span><br><span class="line">    LinkedList&lt;Integer&gt; list2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        list1.addLast(x);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=min)&#123;</span><br><span class="line">            min = x;</span><br><span class="line">            list2.addLast(min);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            list2.addFirst(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> list1.removeLast();</span><br><span class="line">        <span class="keyword">if</span>(a==min)&#123;</span><br><span class="line">            list2.removeLast();</span><br><span class="line">            min = list2.getLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list1.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.min();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>这里题目说的是调用 min、push 及 pop 的时间复杂度都是 O(1)，则证明不能在min函数中遍历，那么我们需要在插入的时候得出。创建两个list，一个保存插入的，一个保存最小值，当目前插入的x比最小值小，就将其更新到最小值里，并把最小值放到list2的最后，否则放到list2的开头。其他的很简单，看代码即可。注意，弹出的也要及时更新。</p></blockquote><h2 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a>剑指 Offer 24. 反转链表</h2><ol><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/9pdjbm/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/9p7s17/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">           temp = cur.next;</span><br><span class="line">           cur.next = pre;</span><br><span class="line">           pre = cur;</span><br><span class="line">           cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>这道题可看官方题解，解释得更为清楚且有图有步骤更清晰。</p></blockquote><h2 id="剑指-Offer-24-反转链表-1"><a href="#剑指-Offer-24-反转链表-1" class="headerlink" title="剑指 Offer 24. 反转链表"></a>剑指 Offer 24. 反转链表</h2><ol><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/9p0yy1/" target="_blank">此时可做 leetcode 的题目 </a></li><li><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/9plk45/" target="_blank">点击查看官方题目解析</a></li></ol><p>–以下是本人代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(cur.val);</span><br><span class="line">            temp.next = cur.next;</span><br><span class="line">            cur.next = temp;</span><br><span class="line">            cur = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random!=<span class="literal">null</span>)&#123;</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head,res = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pre.next = pre.next.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>这道题用拼接是最容易思考的，即将所有节点原样复制下来，然后再做出分离。创建一个指针，然后跳着连接就能得出。最后返回第二条连接就可以了。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构训练1&quot;&gt;&lt;a href=&quot;#数据结构训练1&quot; class=&quot;headerlink&quot; title=&quot;数据结构训练1&quot;&gt;&lt;/a&gt;数据结构训练1&lt;/h1&gt;&lt;h2 id=&quot;数据结构的基础知识&quot;&gt;&lt;a href=&quot;#数据结构的基础知识&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法训练7——二叉树——数据结构</title>
    <link href="http://example.com/2023/08/21/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%837/"/>
    <id>http://example.com/2023/08/21/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%837/</id>
    <published>2023-08-21T09:04:01.000Z</published>
    <updated>2023-08-21T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练7——二叉树——数据结构"><a href="#算法训练7——二叉树——数据结构" class="headerlink" title="算法训练7——二叉树——数据结构"></a>算法训练7——二叉树——数据结构</h1><h2 id="二叉树的基础知识"><a href="#二叉树的基础知识" class="headerlink" title="二叉树的基础知识"></a>二叉树的基础知识</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><ol><li>树（Tree） 是n(n&gt;&#x3D;0)个结点的有限集。</li><li>n&#x3D;0时称为空树。在任意一颗非空树中：有且仅有一个特定的称为根（Root）的结点；</li><li>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。<br><img src="https://pic1.zhimg.com/80/v2-00eb0b393ef3b9d629d823807980f8e8_1440w.webp"></li></ol><h3 id="二叉树相关术语"><a href="#二叉树相关术语" class="headerlink" title="二叉树相关术语"></a>二叉树相关术语</h3><ol><li>树的结点（node）：包含一个数据元素及若干指向子树的分支</li><li>孩子结点（child node）：结点的子树的根称为该结点的孩子</li><li>双亲结点：B 结点是A 结点的孩子，则A结点是B 结点的双亲</li><li>兄弟结点：同一双亲的孩子结点；堂兄结点：同一层上结点</li><li>祖先结点: 从根到该结点的所经分支上的所有结点</li><li>子孙结点：以某结点为根的子树中任一结点都称为该结点的子孙</li><li>结点层：根结点的层定义为 1 ；根的孩子为第二层结点，依此类推</li><li>树的深度：树中最大的结点层</li><li>结点的度：结点子树的个数</li><li>树的度：树中最大的结点度。</li><li>叶子结点：也叫终端结点，是度为 0 的结点</li><li>分枝结点：度不为0的结点；</li><li>有序树：子树有序的树，比如家族树</li><li>无序树：不考虑子树的顺序<br>其中：树的高度和深度的概念需要区分<br><img src="https://ask.qcloudimg.com/http-save/yehe-2226365/35917a5e3b14a14a8571a583e4becf6d.png"></li></ol><h3 id="二叉树的特点："><a href="#二叉树的特点：" class="headerlink" title="二叉树的特点："></a>二叉树的特点：</h3><ol><li>每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。</li><li>左子树和右子树是有顺序的，次序不能任意颠倒。</li><li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</li></ol><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol><li>在二叉树的第i层上最多有2i-1 个节点 。（i&gt;&#x3D;1）</li><li>二叉树中如果深度为k,那么最多有2k-1个节点。(k&gt;&#x3D;1）</li><li>n0&#x3D;n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。</li><li>在完全二叉树中，具有n个节点的完全二叉树的深度为[log2n]+1，其中[log2n]是向下取整。</li><li>若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点有如下特性：<blockquote><p>(1) 若 i&#x3D;1，则该结点是二叉树的根，无双亲, 否则，编号为 [i&#x2F;2] 的结点为其双亲结点;<br>(2) 若 2i&gt;n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；<br>(3) 若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。</p></blockquote></li></ol><h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><ol><li>链式存储<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2020092019554618.png">    </li><li>顺序存储<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200920200429452.png"></li></ol><h3 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h3><p>二叉树主要有两种遍历方式：</p><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li><li>广度优先遍历：一层一层的去遍历。<blockquote><p>这两种遍历是图论中最基本的两种遍历方式，后面在介绍图论的时候 还会介绍到。</p></blockquote></li></ol><p>深度优先遍历:</p><ol><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ol><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806191109896.png"><br>广度优先遍历:</p><ol><li>层次遍历（迭代法）</li></ol><h3 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h3><ol><li>二叉树的定义<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```   </span><br><span class="line">## 二叉树的递归遍历</span><br><span class="line"><span class="number">1.</span> 前序遍历</span><br><span class="line">--此时可做 leetcode 的题目 </span><br><span class="line">https:<span class="comment">//leetcode.cn/problems/binary-tree-preorder-traversal/</span></span><br><span class="line"></span><br><span class="line">--以下是按照卡哥教的方法写的代码</span><br><span class="line"></span><br><span class="line">代码测试（Java）：</span><br><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        firstorder(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstorder</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        firstorder(node.left,list);</span><br><span class="line">        firstorder(node.right,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>–思考：</p><blockquote><p>用递归实现。前序遍历是中左右，按此顺序遍历</p></blockquote><ol start="2"><li>中序遍历<br>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">https://leetcode.cn/problems/binary-tree-inorder-traversal/</a></li></ol><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">      inorder(root, ans);</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; ans)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, ans);</span><br><span class="line">        ans.add(root.val);</span><br><span class="line">        inorder(root.right, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用递归实现。中序遍历是左中右，按此顺序遍历</p></blockquote><ol start="3"><li>中序遍历<br>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">https://leetcode.cn/problems/binary-tree-postorder-traversal/</a></li></ol><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        lastorder(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lastorder</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastorder(node.left,list);</span><br><span class="line">        lastorder(node.right,list);</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用递归实现。中序遍历是左右中，按此顺序遍历</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练7——二叉树——数据结构&quot;&gt;&lt;a href=&quot;#算法训练7——二叉树——数据结构&quot; class=&quot;headerlink&quot; title=&quot;算法训练7——二叉树——数据结构&quot;&gt;&lt;/a&gt;算法训练7——二叉树——数据结构&lt;/h1&gt;&lt;h2 id=&quot;二叉树的基础知识&quot;</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练6——哈希表——数据结构</title>
    <link href="http://example.com/2023/08/18/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%836/"/>
    <id>http://example.com/2023/08/18/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%836/</id>
    <published>2023-08-18T08:11:58.000Z</published>
    <updated>2023-08-15T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练6——哈希表"><a href="#算法训练6——哈希表" class="headerlink" title="算法训练6——哈希表"></a>算法训练6——哈希表</h1><h2 id="哈希表的基础知识"><a href="#哈希表的基础知识" class="headerlink" title="哈希表的基础知识"></a>哈希表的基础知识</h2><h3 id="哈希表的定义"><a href="#哈希表的定义" class="headerlink" title="哈希表的定义"></a>哈希表的定义</h3><ol><li>哈希表（Hash table，也叫散列表）， 是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</li></ol><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><ol><li>哈希表本质上也是一个数组</li><li>哈希函数类似于一个中转站，把key和数组下标进行转换<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021010423494884.png"></li><li>当发生哈希冲突时，即两个相同下标，但值不同的元素出现，我们需要使用开放寻址法或者链表法来解决。开放寻址法是“另谋高就”，直接寻找有空档的插入，不断往后移动；而链表法是用指向的，即next指向我们会冲突到的那个元素。<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235109950.png"><br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235015226.png"></li></ol><h3 id="常见的三种哈希结构："><a href="#常见的三种哈希结构：" class="headerlink" title="常见的三种哈希结构："></a>常见的三种哈希结构：</h3><ol><li>数组</li><li>set（集合）</li><li>map（映射）</li></ol><h3 id="哈希表的基本操作"><a href="#哈希表的基本操作" class="headerlink" title="哈希表的基本操作"></a>哈希表的基本操作</h3><ol><li>哈希表的定义<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">```    </span><br><span class="line"><span class="number">1.</span> 哈希表的读写操作</span><br><span class="line">```java</span><br><span class="line">hashmap.put(<span class="number">1</span>, <span class="string">&quot;string1&quot;</span>); <span class="comment">// 执行完后hash表内为&#123;1=string1&#125;</span></span><br><span class="line">hashmap.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/valid-anagram/">https://leetcode.cn/problems/valid-anagram/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> record[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            record[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            record[t.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> count: record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;               </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="–思考：-用一个数组来存储字符串每个字母出现的次数，然后遍历字符串2，每次遇到相同的字母，就相应的数组下标–。再遍历数组，当数组有一个不等于0，证明两个字符串所含的字母个数不等，即返回false。"><a href="#–思考：-用一个数组来存储字符串每个字母出现的次数，然后遍历字符串2，每次遇到相同的字母，就相应的数组下标–。再遍历数组，当数组有一个不等于0，证明两个字符串所含的字母个数不等，即返回false。" class="headerlink" title="–思考：&gt;用一个数组来存储字符串每个字母出现的次数，然后遍历字符串2，每次遇到相同的字母，就相应的数组下标–。再遍历数组，当数组有一个不等于0，证明两个字符串所含的字母个数不等，即返回false。"></a>–思考：<br>&gt;用一个数组来存储字符串每个字母出现的次数，然后遍历字符串2，每次遇到相同的字母，就相应的数组下标–。再遍历数组，当数组有一个不等于0，证明两个字符串所含的字母个数不等，即返回false。</h2><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">https://leetcode.cn/problems/intersection-of-two-arrays/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1.length==<span class="number">0</span>||nums2.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">            set1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(i))&#123;</span><br><span class="line">                set2.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set2.stream().mapToInt(x-&gt;x).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先判断两个数组的长度，若有一个长度为0，那么直接返回空集。用一个hashset来存储，不断把第一个数组里面的值放入set，而set是不允许重复的，所以最后直接遍历第二个数组，有相同的就加在第二个set里面，然后将其变成数组返回。</p></blockquote><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/happy-number/">https://leetcode.cn/problems/happy-number/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !record.contains(n)) &#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = calculate(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先定义一个set，然后遍历n，当n等于1或者原先的set里面有这个n的时候便退出循环，判断此时的n是否等于1。而在循环中，我们需要不断把n分解，将其各个位置上的数平方相加。写一个新的函数，用temp存储个位上的数，然后不断让个位上的数相乘并相加，n不断除以10。</p></blockquote><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/two-sum/">https://leetcode.cn/problems/two-sum/</a><br>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="literal">null</span>||nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先定义一个数组用来存储答案，定义一个map，遍历数组，每次将target的值减去当前遍历到的数，然后如果此时的map里面找得到相应的key,就是剩下的这个值，就将数组res[1] &#x3D; i,res[0] &#x3D; map.get(temp)，然后结束循环，若此时里面找不到，就将这个值作为key放入，将对应的下标作为值存入。例如，nums &#x3D; [3,2,4], target &#x3D; 6，那么进入循环，temp变为3，然后map中没有值为3的key，把3，0放入map，然后temp &#x3D; 4，map中没有值为4的key，把2，1放入map，继续遍历，temp &#x3D; 2，map中有2的key，让res[1] &#x3D; 2,res[0] &#x3D; 1，退出循环，返回答案[1,2]。</p></blockquote><h2 id="四数相加II"><a href="#四数相加II" class="headerlink" title="四数相加II"></a>四数相加II</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/two-sum/">https://leetcode.cn/problems/two-sum/</a><br>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums2)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> i+j;</span><br><span class="line">                map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums4)&#123;</span><br><span class="line">                res+=map.getOrDefault(<span class="number">0</span>-i-j,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题目的是nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0。定义一个hashmap，遍历数组1和数组2，让sum值为二者之和，让sum作为key,value为sum出现的次数。map.getOrDefault(sum,0)是寻找sum，若出现过，就返回值，若未出现，就返回0，每一次加1。然后遍历数组3和数组4，每一次不断让res加上map.getOrDefault(0-i-j,0);因为要i+j+k+l &#x3D; 0，所以要用0去减i-j。</p></blockquote><h2 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/ransom-note/">https://leetcode.cn/problems/ransom-note/</a><br>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">            record[magazine.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">            record[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> count:record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题其实跟有效的字母异位词是一个道理，只是最后返回false的条件改为有个元素的值&lt;0，证明超支了，所以返回false。</p></blockquote><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/3sum/">https://leetcode.cn/problems/3sum/</a><br>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> list;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right&gt;left)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        list.add(Arrays.asList(nums[i],nums[left],nums[right]));</span><br><span class="line">                        <span class="keyword">while</span> (right&gt;left&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (right&gt;left&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题其实跟四数和不同的是，i，j，k不能相同。首先我们需要给数组排序，然后遍历，当第一个最小的元素都是大于0是，我们直接返回。然后我们需要去重，此时不能用nums[i] &#x3D;&#x3D; nums[i + 1]，为什么呢？因为当数组是-1，-1，2时，会被排除掉，但是题目的要求是元组不能重复，而不是元素的数字不能重复，所以我们要用i&gt;0&amp;&amp;nums[i]&#x3D;&#x3D;nums[i-1]。定义左右指针，当和的值太大，右边指针往前移动，让和太小，左边指针往前移动，当等于0的时候，集合加上中国组合，然后来去重。因为 i 不变，当此时 right取的数的值与前一个数相同，所以不用在计算，直接跳，left也同理。然后继续循环。</p></blockquote><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/4sum/">https://leetcode.cn/problems/4sum/</a><br>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j - <span class="number">1</span>] == nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j+<span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (left&lt;right)&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                        <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            list.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                            <span class="keyword">while</span> (right&gt;left&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                                right--;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">while</span> (right&gt;left&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                                left++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            right--;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题跟三数之和大致相同，只是在加值的时候我们需要再多加一个循环变成j，作为第四个数来加。第四个数去重同i一样。后面的步骤和三树之和相同，</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练6——哈希表&quot;&gt;&lt;a href=&quot;#算法训练6——哈希表&quot; class=&quot;headerlink&quot; title=&quot;算法训练6——哈希表&quot;&gt;&lt;/a&gt;算法训练6——哈希表&lt;/h1&gt;&lt;h2 id=&quot;哈希表的基础知识&quot;&gt;&lt;a href=&quot;#哈希表的基础知识&quot; cla</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练5</title>
    <link href="http://example.com/2023/08/16/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%835/"/>
    <id>http://example.com/2023/08/16/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%835/</id>
    <published>2023-08-16T12:25:56.000Z</published>
    <updated>2023-08-15T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练5——链表"><a href="#算法训练5——链表" class="headerlink" title="算法训练5——链表"></a>算法训练5——链表</h1><h2 id="链表的基础知识"><a href="#链表的基础知识" class="headerlink" title="链表的基础知识"></a>链表的基础知识</h2><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><ol><li>顺序存储：<br><img src="https://pic2.zhimg.com/80/v2-cb94347c02bcaa8b8f037ff864b294f5_1440w.webp"><br>缺点是：<br>1.插入删除操作所需要移动的元素很多，很麻烦<br>2.必须为数组开足够的空间，否则有溢出风险。</li><li>链式存储：<br><a href="https://pic1.zhimg.com/80/v2-1291b4d1e28918cc857b718028f1e138_1440w.webp"><img src="https://pic2.zhimg.com/80/v2-cb94347c02bcaa8b8f037ff864b294f5_1440w.webp"></a><br>使用链式存储解决了数组不方便移动，插入，删除元素的问题，但是这种实现需要较多的空间</li></ol><hr><p>–以下是我在b站看到的讲得很好的视频<br>   <a href="https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&vd_source=e0b9ba041c5b69cd0f0069996e27b2f6">https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e0b9ba041c5b69cd0f0069996e27b2f6</a></p><h3 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h3><ol><li>单链表</li><li>双链表</li><li>循环单链表<br><a href="https://pic4.zhimg.com/v2-fed2e1976f4fa3236e123b6313dbf467_r.jpg"><img src="https://pic2.zhimg.com/80/v2-cb94347c02bcaa8b8f037ff864b294f5_1440w.webp"></a></li></ol><hr><h3 id="链表定义的模板"><a href="#链表定义的模板" class="headerlink" title="链表定义的模板"></a>链表定义的模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line">---         </span><br><span class="line"></span><br><span class="line">## 移除链表元素</span><br><span class="line">--此时可做 leetcode 的题目 </span><br><span class="line">https:<span class="comment">//leetcode.cn/problems/remove-linked-list-elements/</span></span><br><span class="line"></span><br><span class="line">--以下是按照卡哥教的方法写的代码</span><br><span class="line"></span><br><span class="line">代码测试（Java）：</span><br><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val==val)&#123;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="–思考：-首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义一个与-1一样的节点。当移动的节点是空的时，即走到了最后，就返回头节点。遍历过程中，当移动的指针遍历到的值等于要搜索的值时，让pre的下一个指向cur的指向，否则，pre等于cur，然后cur继续向下移动。即pre永远在cur的前面。"><a href="#–思考：-首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义一个与-1一样的节点。当移动的节点是空的时，即走到了最后，就返回头节点。遍历过程中，当移动的指针遍历到的值等于要搜索的值时，让pre的下一个指向cur的指向，否则，pre等于cur，然后cur继续向下移动。即pre永远在cur的前面。" class="headerlink" title="–思考：&gt;首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义一个与-1一样的节点。当移动的节点是空的时，即走到了最后，就返回头节点。遍历过程中，当移动的指针遍历到的值等于要搜索的值时，让pre的下一个指向cur的指向，否则，pre等于cur，然后cur继续向下移动。即pre永远在cur的前面。"></a>–思考：<br>&gt;首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义一个与-1一样的节点。当移动的节点是空的时，即走到了最后，就返回头节点。遍历过程中，当移动的指针遍历到的值等于要搜索的值时，让pre的下一个指向cur的指向，否则，pre等于cur，然后cur继续向下移动。即pre永远在cur的前面。</h2><h2 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/design-linked-list/">https://leetcode.cn/problems/design-linked-list/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode ()&#123;&#125;</span><br><span class="line">        ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=index;i++)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">            addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">            addAtIndex(size,val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">                pred = pred.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">add</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">            add.next = pred.next;</span><br><span class="line">            pred.next = add;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=size)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">                pred = pred.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pred.next = pred.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>链表的基础定义，此处不解释了。</p></blockquote><hr><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/reverse-linked-list/">https://leetcode.cn/problems/reverse-linked-list/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="–思考：-当头节点为空时，直接返回空。当只有头结点时，返回头节点。定义三个指针，遍历，比如123-321，temp-2，然后cur，即1的下一个指向空，然后指向空的指针向前移动指向1，指向1的指针向前移动指向2。接着第一轮，让temp-3，让2的下一个指向1-然后指向1的指针向前移动指向2，指向2的指针向前移动以下3，以此类推。"><a href="#–思考：-当头节点为空时，直接返回空。当只有头结点时，返回头节点。定义三个指针，遍历，比如123-321，temp-2，然后cur，即1的下一个指向空，然后指向空的指针向前移动指向1，指向1的指针向前移动指向2。接着第一轮，让temp-3，让2的下一个指向1-然后指向1的指针向前移动指向2，指向2的指针向前移动以下3，以此类推。" class="headerlink" title="–思考：&gt;当头节点为空时，直接返回空。当只有头结点时，返回头节点。定义三个指针，遍历，比如123-&gt;321，temp &#x3D; 2，然后cur，即1的下一个指向空，然后指向空的指针向前移动指向1，指向1的指针向前移动指向2。接着第一轮，让temp&#x3D;3，让2的下一个指向1.然后指向1的指针向前移动指向2，指向2的指针向前移动以下3，以此类推。"></a>–思考：<br>&gt;当头节点为空时，直接返回空。当只有头结点时，返回头节点。定义三个指针，遍历，比如123-&gt;321，temp &#x3D; 2，然后cur，即1的下一个指向空，然后指向空的指针向前移动指向1，指向1的指针向前移动指向2。接着第一轮，让temp&#x3D;3，让2的下一个指向1.然后指向1的指针向前移动指向2，指向2的指针向前移动以下3，以此类推。</h2><h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">https://leetcode.cn/problems/swap-nodes-in-pairs/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        ListNode temp;</span><br><span class="line">        ListNode firstnode;</span><br><span class="line">        ListNode secondnode;</span><br><span class="line">        <span class="keyword">while</span> (cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next.next.next;</span><br><span class="line">            firstnode = cur.next;</span><br><span class="line">            secondnode = cur.next.next;</span><br><span class="line">            cur.next = secondnode;</span><br><span class="line">            secondnode.next = firstnode;</span><br><span class="line">            firstnode.next = temp;</span><br><span class="line">            cur = firstnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="–思考：-当头节点为空时，直接返回空。当只有头结点时，返回头节点。首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义三个指针，遍历，1234-2143-，先让temp-3，然后快指针走到1，慢指针走到2，让指向-1的指针下一个指向2，让2的指针指向1，然后1的指针指向3，指向-1的指针走到1-以此类推。"><a href="#–思考：-当头节点为空时，直接返回空。当只有头结点时，返回头节点。首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义三个指针，遍历，1234-2143-，先让temp-3，然后快指针走到1，慢指针走到2，让指向-1的指针下一个指向2，让2的指针指向1，然后1的指针指向3，指向-1的指针走到1-以此类推。" class="headerlink" title="–思考：&gt;当头节点为空时，直接返回空。当只有头结点时，返回头节点。首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义三个指针，遍历，1234-&gt;2143 ，先让temp&#x3D;3，然后快指针走到1，慢指针走到2，让指向-1的指针下一个指向2，让2的指针指向1，然后1的指针指向3，指向-1的指针走到1.以此类推。"></a>–思考：<br>&gt;当头节点为空时，直接返回空。当只有头结点时，返回头节点。首先定义一个节点，值为-1，next即指向head，然后定义一个移动的指针是头节点，再定义三个指针，遍历，1234-&gt;2143 ，先让temp&#x3D;3，然后快指针走到1，慢指针走到2，让指向-1的指针下一个指向2，让2的指针指向1，然后1的指针指向3，指向-1的指针走到1.以此类推。</h2><h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            size++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> size-n;</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        pre.next = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(i==index-<span class="number">1</span>)&#123;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="–思考：-先计算出链表的长度，然后index表示要找的那个元素在链表中的下标。遍历到那个下标，让前一个节点指向它的下一个节点，即删除。"><a href="#–思考：-先计算出链表的长度，然后index表示要找的那个元素在链表中的下标。遍历到那个下标，让前一个节点指向它的下一个节点，即删除。" class="headerlink" title="–思考：&gt;先计算出链表的长度，然后index表示要找的那个元素在链表中的下标。遍历到那个下标，让前一个节点指向它的下一个节点，即删除。"></a>–思考：<br>&gt;先计算出链表的长度，然后index表示要找的那个元素在链表中的下标。遍历到那个下标，让前一个节点指向它的下一个节点，即删除。</h2><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="keyword">while</span> (fast!=slow)&#123;</span><br><span class="line">            fast = (fast==<span class="literal">null</span>)?headB:fast.next;</span><br><span class="line">            slow = (slow==<span class="literal">null</span>)?headA:slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>运用快慢指针，若两个指针交替后仍能有相同的点，即相交，那么返回fast指针。</p></blockquote><hr><h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">https://leetcode.cn/problems/linked-list-cycle-ii/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">null</span>||fast.next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast!=slow)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>运用快慢指针，快的每次两步，慢的每次一步，当快与慢能一起到时，就会有节点，然后继续遍历，当他们两个后面的也相等时，即是这个节点，返回。</p></blockquote><hr><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/linked-list-cycle/">https://leetcode.cn/problems/linked-list-cycle/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span>(fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>运用快慢指针，快的每次两步，慢的每次一步，当快与慢能一起到时，就会有节点，返回true。（跟II是一样的）</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练5——链表&quot;&gt;&lt;a href=&quot;#算法训练5——链表&quot; class=&quot;headerlink&quot; title=&quot;算法训练5——链表&quot;&gt;&lt;/a&gt;算法训练5——链表&lt;/h1&gt;&lt;h2 id=&quot;链表的基础知识&quot;&gt;&lt;a href=&quot;#链表的基础知识&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练4</title>
    <link href="http://example.com/2023/08/15/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%834/"/>
    <id>http://example.com/2023/08/15/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%834/</id>
    <published>2023-08-15T09:28:09.000Z</published>
    <updated>2023-08-15T09:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练4——二分查找"><a href="#算法训练4——二分查找" class="headerlink" title="算法训练4——二分查找"></a>算法训练4——二分查找</h1><h2 id="二分查找的基础知识"><a href="#二分查找的基础知识" class="headerlink" title="二分查找的基础知识"></a>二分查找的基础知识</h2><h3 id="二分查找的定义"><a href="#二分查找的定义" class="headerlink" title="二分查找的定义"></a>二分查找的定义</h3><ol><li>可解决问题：<blockquote><p>问题1.如果要查找数值为4的最小下标，该怎么处理？<br>问题2.如果要查找第一个大于或等于数值为4的下标，该如何处理？<br>问题3.如果要查找第一个大于数值为4的下标，该如何处理？<br>问题4.如果要统计数值为4的个数，该如何处理？</p></blockquote></li><li>使用前提：<br>数组内没有重复元素；数组是有序数组（升序或者降序，如果没有排序，让你找出数组中所需数的下标，二分法就不再适用，原因在下面“原理”段落讲；若想强行使用sort排序，则无法获取数组正确的下标）</li></ol><hr><p>–以下是我在b站看到的讲得很好的视频<br>   <a href="https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&vd_source=e0b9ba041c5b69cd0f0069996e27b2f6">https://www.bilibili.com/video/BV1d54y1q7k7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e0b9ba041c5b69cd0f0069996e27b2f6</a></p><h3 id="二分查找的模板"><a href="#二分查找的模板" class="headerlink" title="二分查找的模板"></a>二分查找的模板</h3><ol><li>建模：划分蓝红区域，确定 IsBlue（）</li><li>确定返回 L 还是 R</li><li>套用算法模板</li><li>(后处理……)，包含只有蓝色区域&#x2F;红色区域的返回值处理问题等<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">     <span class="keyword">while</span> (left+<span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line">## 二分查找</span><br><span class="line">--此时可做 leetcode 的题目 </span><br><span class="line">https:<span class="comment">//leetcode.cn/problems/binary-search/description/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码测试（Java）：</span><br><span class="line">```Java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">     <span class="keyword">while</span> (left+<span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>–思考：</p><blockquote><p>此题直接照模板无脑AC</p></blockquote><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a></p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题按双指针的方法，即当要的数值跟现在所要的数值不相等时，让目前的值等于慢指针的值，然后慢指针再加加。</p></blockquote><h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><p>–以下是我的暴力解法</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; nums.length;i++)&#123;</span><br><span class="line">            nums[i]  = nums[i]*nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–卡哥的双指针做法<br>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] * nums[l] &gt; nums[r] * nums[r])&#123;</span><br><span class="line">                res[j--] = nums[l] * nums[l++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[j--] = nums[r] * nums[r--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题按二分查找，左右两处而遍历，先比较最左端和最右端的值，大的直接放在最后，然后相应的指针加减，index减向前。</p></blockquote><h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">https://leetcode.cn/problems/minimum-size-subarray-sum/</a></p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;right&lt;nums.length;right++)&#123;</span><br><span class="line">            sum+=nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum&gt;=target)&#123;</span><br><span class="line">                result = Math.min(result,right-left+<span class="number">1</span>);</span><br><span class="line">                sum-=nums[left++];<span class="comment">//left往后走，然后总值减去前一个值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题按双指针的方法，不断累加值，当sum大于target时，则不断比较出最小的长度，然后让sum减去第一个值，然后left后走。不断让sum算出大于target然后长度最小的值。</p></blockquote><h2 id="螺旋矩阵II"><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a></p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> [][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span> (loop++ &lt;n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = start;j&lt;n-loop;j++)&#123;</span><br><span class="line">                res[start][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i = start;i&lt;n-loop;i++)&#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;j&gt;=loop;j--)&#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;i&gt;=loop;i--)&#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            res[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>画图即可知道，循环次数大约是n的1&#x2F;2.第一个循环，即在第一层，然后我们不遍历到最后一个，比如n&#x3D;3,那么即遍历 0 1 ，然后下一层，即顺时针下来一列，arr[0][2] arr[1][2] ,然后遍历最下一层从右到左，arr[2][2] arr[2][1],然后遍历最左边一列，从下到上，arr[2][0] arr[1][0]，然后便是下一层，以此类推。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练4——二分查找&quot;&gt;&lt;a href=&quot;#算法训练4——二分查找&quot; class=&quot;headerlink&quot; title=&quot;算法训练4——二分查找&quot;&gt;&lt;/a&gt;算法训练4——二分查找&lt;/h1&gt;&lt;h2 id=&quot;二分查找的基础知识&quot;&gt;&lt;a href=&quot;#二分查找的基础知</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练3</title>
    <link href="http://example.com/2023/08/12/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%833/"/>
    <id>http://example.com/2023/08/12/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%833/</id>
    <published>2023-08-12T02:57:09.000Z</published>
    <updated>2021-03-02T05:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练3——回溯算法"><a href="#算法训练3——回溯算法" class="headerlink" title="算法训练3——回溯算法"></a>算法训练3——回溯算法</h1><h2 id="回溯算法的基础知识"><a href="#回溯算法的基础知识" class="headerlink" title="回溯算法的基础知识"></a>回溯算法的基础知识</h2><h3 id="回溯算法的定义"><a href="#回溯算法的定义" class="headerlink" title="回溯算法的定义"></a>回溯算法的定义</h3><ol><li>回溯法思路的简单描述是：把问题的解空间转化成了图或者树的结构表示，然后使用深度优先搜索策略进行遍历，遍历的过程中记录和寻找所有可行解或者最优解。</li><li>听说过这么一句话：回溯是递归的副产品，只要有递归就会有回溯</li><li>事实上，回溯法的本质是穷举，所以效率其实并不高，最多剪枝使其快一些，但本质仍然是暴力枚举。</li><li>这里附上卡哥写的文章为我们总结的问题类型。也就是组合无序，排列有序。</li></ol><hr><p>   <img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210219192050666.png"></p><hr><h3 id="回溯算法的模板"><a href="#回溯算法的模板" class="headerlink" title="回溯算法的模板"></a>回溯算法的模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="string">&quot;原始参数&quot;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//终止条件(递归必须要有终止条件)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;终止条件&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//一些逻辑操作（可有可无，视情况而定）</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&quot;for循环开始的参数&quot;</span>; i &lt; <span class="string">&quot;for循环结束的参数&quot;</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//选择：本层集合中元素（树中节点孩子的数量就是集合的大小）</span></span><br><span class="line">        <span class="comment">//一些逻辑操作（可有可无，视情况而定）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//做出选择or处理节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        backtracking(<span class="string">&quot;新的参数&quot;</span>);</span><br><span class="line">        <span class="comment">//一些逻辑操作（可有可无，视情况而定）</span></span><br><span class="line">        <span class="comment">//回溯，撤销原先的选择</span></span><br><span class="line">        <span class="comment">//撤销选择</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line">---        </span><br><span class="line">                    </span><br><span class="line">## 组合</span><br><span class="line">--此时可做 leetcode 的题目 </span><br><span class="line">https:<span class="comment">//leetcode.cn/problems/combinations/</span></span><br><span class="line"></span><br><span class="line">--以下是按照卡哥教的方法写的代码</span><br><span class="line"></span><br><span class="line">代码测试（Java）：</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; list ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Integer&gt; temp ;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        search(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span> <span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==k)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startindex;i&lt;=n-(k-temp.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            temp.add(i);</span><br><span class="line">            search(n,k,i+<span class="number">1</span>);</span><br><span class="line">            temp.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先定义一个集合，再定义一个有序的集合temp来收集临时组合成的组合。关于回溯：终止条件是当temp的大小刚好等于需要的参数大小，证明如果需要三个数就已经达到，那么直接将他放入总的收集的list中，然后返回。关于循环条件：i 最多到 n - ( k - temp.size() ) + 1，是有效剪枝，此时可以自己列举以下便能得出这个范围。然后在循环中每次递归之后回溯，将temp刚刚加入的元素删去。</p></blockquote><h2 id="组合总和III"><a href="#组合总和III" class="headerlink" title="组合总和III"></a>组合总和III</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/combination-sum-iii/">https://leetcode.cn/problems/combination-sum-iii/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; list ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkedList&lt;Integer&gt; temp ;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        search2(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search2</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==k)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:temp)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            temp.add(i);</span><br><span class="line">            search2(n,k,i+<span class="number">1</span>);</span><br><span class="line">            temp.removeLast();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此题跟上一道题一样，同个思路，就是多加了终止条件，当sum&#x3D;n的时候才加进去，这个的前提是temp.size&#x3D;&#x3D;k。</p></blockquote><h2 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a>电话号码的字母组合</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">https://leetcode.cn/problems/letter-combinations-of-a-phone-number/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  List&lt;String&gt; strings ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder stringBuilder;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits==<span class="literal">null</span>|| digits.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        strings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stringBuilder = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String[] strings1 = &#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">        renewstring(digits,strings1,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> strings;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renewstring</span><span class="params">(String digits,String [] strings1,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == digits.length())&#123;</span><br><span class="line">            strings.add(stringBuilder.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strings1[digits.charAt(n)-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            stringBuilder.append(str.charAt(i));</span><br><span class="line">            renewstring(digits,strings1,n+<span class="number">1</span>);</span><br><span class="line">            stringBuilder.deleteCharAt(stringBuilder.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先判断字符串是不是空，若是空直接返回。然后进入回溯算法，当此时统计的长度刚好等于字符串的长度，就把这个长度加入StringBuilder。然后循环字符串，每次加入字符串一个字符，然后在循环中每次递归之后回溯，将StringBuilder刚刚加入的元素删去。</p></blockquote><h2 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; list ;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        search3(list,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search3</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; temp, <span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> sum, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum+candidates[i]&gt;target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.add(candidates[i]);</span><br><span class="line">            search3(list,temp,candidates,target,sum+candidates[i],i);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>首先排列传入的数组，然后进行回溯算法。确定终止条件，一个是保存组合,一个是保存临时2的组合，一个是目标数，一个是计算和是否与target相等，一个则是像之前一样的start index。注意！此时这个sum是在递归过程中不断累加的。</p></blockquote><h2 id="组合总和II"><a href="#组合总和II" class="headerlink" title="组合总和II"></a>组合总和II</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/combination-sum-ii/">https://leetcode.cn/problems/combination-sum-ii/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        search4(list,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search4</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; list,List&lt;Integer&gt; temp,<span class="type">int</span> []candidates,<span class="type">int</span> target,<span class="type">int</span> sum,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;candidates.length&amp;&amp; sum + candidates[i] &lt;= target; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; startindex &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] ) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.add(candidates[i]);</span><br><span class="line">            search4(list,temp,candidates,target,sum+candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>组合总和，是给一个数组，任意取数，也可以重复取，如果至少一个数字的被选数量不同，则两种组合是不同的。 所以终止条件直接就是和等于目标数即可<br>组合总和II ，是给的数组中的每个数字在每个组合中只能使用一次。所以需要加限制条件：i &gt; startindex &amp;&amp; candidates[i] &#x3D;&#x3D; candidates[i - 1]，也可以用use数组，这里没写出来，可以参照卡哥的文章链接：<a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE</a><br>组合总和III,是只使用数字1到9，没有数组，直接遍历即可</p></blockquote><h2 id="分割回文串"><a href="#分割回文串" class="headerlink" title="分割回文串"></a>分割回文串</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/palindrome-partitioning/">https://leetcode.cn/problems/palindrome-partitioning/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; lists  = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        search5(lists,temp,<span class="number">0</span>,s);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search5</span><span class="params">(List&lt;List&lt;String&gt;&gt; list,List&lt;String&gt; temp,<span class="type">int</span> startindex,String s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(startindex&gt;=s.length())&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ishuiwen(s,startindex,i))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> s.substring(startindex,i+<span class="number">1</span>);</span><br><span class="line">                temp.add(s1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            search5(list,temp,i+<span class="number">1</span>,s);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ishuiwen</span><span class="params">(String s,<span class="type">int</span> startindex,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>定义相应存储的集合，然后进入回溯算法，参数是两个集合和要分割的字符串还有一个start index。终止条件即目前的start index，也就是字符串的位置大于等于目前字符串的长度，就将它放入list。写一个判断是否回文的方法：即遍历这个字符串，判断他们是否前与尾每个都相等，是否相应返回结果。然后再循环中判断是否回文，是的话按取到的下标截取相应的长度，然后进入递归，然后继续按原先的temp.remove；如果不是回文，直接i++。</p></blockquote><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/subsets/">https://leetcode.cn/problems/subsets/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  List&lt;List&lt;Integer&gt;&gt; list1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; temp1;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        search6(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search6</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp1));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;nums.length;i++)&#123;</span><br><span class="line">            temp1.add(nums[i]);</span><br><span class="line">            search6(nums,i+<span class="number">1</span>);</span><br><span class="line">            temp1.remove(temp1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>定义相应存储的集合，然后进入回溯算法，参数是数组还有一个start index。可以不用终止条件，因为他是穷举，每一种情况都要，所以直接全加进集合，接着便是按照模板写。</p></blockquote><h2 id="子集II"><a href="#子集II" class="headerlink" title="子集II"></a>子集II</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/subsets-ii/">https://leetcode.cn/problems/subsets-ii/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  List&lt;List&lt;Integer&gt;&gt; list1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; temp1;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        search7(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search7</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp1));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;startindex &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp1.add(nums[i]);</span><br><span class="line">            search7(nums,i+<span class="number">1</span>);</span><br><span class="line">            temp1.remove(temp1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>子集的数组是没有含有重复的元素，所以集合就不会有重复的搭配。<br>子集II的数组是含有重复的元素的，然后解集不能包含重复的子集。所以我们需要先将它排序，然后再跟前面一样加入判断条件：i &gt; startindex &amp;&amp; candidates[i] &#x3D;&#x3D; candidates[i - 1]。如果数组含有重复元素，且元素需要看成同一个（这个是我个人的想法，可能有失准确），就可以用这个判断条件。</p></blockquote><h2 id="递增子序列"><a href="#递增子序列" class="headerlink" title="递增子序列"></a>递增子序列</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/non-decreasing-subsequences/description/">https://leetcode.cn/problems/non-decreasing-subsequences/description/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  List&lt;List&lt;Integer&gt;&gt; list1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; temp1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        search8(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search8</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp1.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            list1.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp1));</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp1.isEmpty()&amp;&amp;temp1.get(temp1.size()-<span class="number">1</span>)&gt;nums[i] || hashSet.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet.add(nums[i]);</span><br><span class="line">            temp1.add(nums[i]);</span><br><span class="line">            search8(nums,i+<span class="number">1</span>);</span><br><span class="line">            temp1.remove(temp1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>注意这题：是不能排序的，因为它题目的意思应该是，按给出的数组顺序找出递增序列，比如4 4 3 2 1 这时不可以给他们排序，因为它就是排序后给出的是1 2 3 4 4 ，那么1234也成立，但是答案是44，所以不行。</p></blockquote><hr><p>–这是我自己写的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  List&lt;List&lt;Integer&gt;&gt; list1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; temp1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        temp1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        search8(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">search8</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> startindex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp1.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            list1.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(temp1));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startindex;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!temp1.isEmpty()&amp;&amp;temp1.get(temp1.size()-<span class="number">1</span>)&gt;nums[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; startindex &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] ) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp1.add(nums[i]);</span><br><span class="line">            search8(nums,i+<span class="number">1</span>);</span><br><span class="line">            temp1.remove(temp1.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个代码不能AC,我暂时还发现不出问题，没想清楚为什么会错，所以希望有某位大佬看见能给我指点一二。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练3——回溯算法&quot;&gt;&lt;a href=&quot;#算法训练3——回溯算法&quot; class=&quot;headerlink&quot; title=&quot;算法训练3——回溯算法&quot;&gt;&lt;/a&gt;算法训练3——回溯算法&lt;/h1&gt;&lt;h2 id=&quot;回溯算法的基础知识&quot;&gt;&lt;a href=&quot;#回溯算法的基础知</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练2</title>
    <link href="http://example.com/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%832/"/>
    <id>http://example.com/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%832/</id>
    <published>2023-08-11T12:47:10.000Z</published>
    <updated>2021-09-17T05:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练2——队列"><a href="#算法训练2——队列" class="headerlink" title="算法训练2——队列"></a>算法训练2——队列</h1><h2 id="队列的基础知识"><a href="#队列的基础知识" class="headerlink" title="队列的基础知识"></a>队列的基础知识</h2><h3 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h3><ol><li>队列（Queue）队列（queue）是一种先进先出的、操作受限的线性表。</li><li>特点：先进先出 （注意：这点与栈不同，队列是先进先出，可以想象成排队，而栈可以想象成一个羽毛球筒）<br><img src="https://ask.qcloudimg.com/http-save/yehe-1147522/c9iv2t334h.png"></li></ol><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><pre><code>1. 队头（Front）：允许删除的一端，又称队首2. 队尾（Rear）：允许插入的一端3. EnQueue(&amp;Q, x)：入队，若队列Q未满，将x加入，使之成为新的队尾。或者用add方法，或者put方法4. DeQueue(&amp;Q, &amp;x)：出队，若队列Q非空，删除队头元素，并用x返回。或者用remove方法，移除并返回队列头部的元素5. 空队列：不包含任何元素的空表6. 队满：队中已放满元素/(s-&gt;Top==MaxSize-1)     7. offer ：添加一个元素并返回true8. poll ：移除并返问队列头部的元素9. peek ：返回队列头部的元素</code></pre><blockquote><p>注意：队列是一种只允许在一端进行插入操作，在另一端进行删除操作的先入先出的受限的线性表。        </p></blockquote><h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/implement-stack-using-queues/">https://leetcode.cn/problems/implement-stack-using-queues/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queueIn;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">            queueIn = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            queueIn.add(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">            change();</span><br><span class="line">            <span class="keyword">return</span> queueIn.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">            change();</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> queueIn.poll();</span><br><span class="line">            queueIn.add(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queueIn.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queueIn.size();</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">while</span> (size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                queueIn.add(queueIn.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用栈模拟队列，此方法是用两个栈来放，一个放进栈的元素，一个放出栈的元素。自定义一个函数，判断目前要包含出栈元素的栈是否为空，不为空则返回，将里面的元素弹出，当为空时，进入while循环，判断包含入栈元素的栈是否为空，若不为空，则将栈顶元素弹出逐步放入出栈，最后在出栈那里实现队列。</p></blockquote><h2 id="用队列实现栈-1"><a href="#用队列实现栈-1" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/implement-stack-using-queues/">https://leetcode.cn/problems/implement-stack-using-queues/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queueIn;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">            queueIn = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            queueIn.add(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">            change();</span><br><span class="line">            <span class="keyword">return</span> queueIn.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">            change();</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> queueIn.poll();</span><br><span class="line">            queueIn.add(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queueIn.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queueIn.size();</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">while</span> (size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                queueIn.add(queueIn.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用队列模拟栈，此方法是用一个队列就可以，关键点是栈是先进后出，那么用一个change函数，把表头的元素重新放到队尾，直到最后一个元素就来弹出，实现一个队列轮换实现栈。</p></blockquote><h2 id="前-K-个高频元素"><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a>前 K 个高频元素</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/top-k-frequent-elements/">https://leetcode.cn/problems/top-k-frequent-elements/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// 优先级队列，为了避免复杂 api 操作，pq 存储数组</span></span><br><span class="line">        <span class="comment">// lambda 表达式设置优先级队列从大到小存储 o1 - o2 为从大到小，o2 - o1 反之</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k]; <span class="comment">// 答案数组为 k 个元素</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 记录元素出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x : map.entrySet()) &#123; <span class="comment">// entrySet 获取 k-v Set 集合</span></span><br><span class="line">            <span class="comment">// 将 kv 转化成数组</span></span><br><span class="line">            <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">            tmp[<span class="number">0</span>] = x.getKey();</span><br><span class="line">            tmp[<span class="number">1</span>] = x.getValue();</span><br><span class="line">            pq.offer(tmp);</span><br><span class="line">            <span class="keyword">if</span>(pq.size() &gt; k) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line">            res[i] = pq.poll()[<span class="number">0</span>]; <span class="comment">// 获取优先队列里的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–以下是我原先自己写的代码<br>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.containsKey(num) ? map.get(num) : <span class="number">0</span>;</span><br><span class="line">            map.put(num, count + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里将map.entrySet转换为List</span></span><br><span class="line">        List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; listmap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map.Entry&lt;Integer, Integer&gt;&gt;(map.entrySet()); <span class="comment">//转换为list</span></span><br><span class="line">        <span class="comment">//然后通过比较器来实现排序</span></span><br><span class="line">        listmap.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; o1, Map.Entry&lt;Integer, Integer&gt; o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getValue().compareTo(o1.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry : listmap) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">mapKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">mapValue</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            list.add(mapKey);</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;=k)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream().mapToInt(x-&gt;x).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>卡哥解法：定义一个优先级队列，用数组模式，优先级为从大到小排列。再用一个map存储元素出现的次数，有就原先+1，无就为0+1；循环map，将键和值转换为数组，再把组合放进优先级队列排序。</p></blockquote><blockquote><p>自己的解法：用一个hashmap存储，并记录次数，然后把map转换成list进行排序，用比较器来实现，然后遍历这个list，当计数到前k个时，跳出循环，将list转成数组返回。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练2——队列&quot;&gt;&lt;a href=&quot;#算法训练2——队列&quot; class=&quot;headerlink&quot; title=&quot;算法训练2——队列&quot;&gt;&lt;/a&gt;算法训练2——队列&lt;/h1&gt;&lt;h2 id=&quot;队列的基础知识&quot;&gt;&lt;a href=&quot;#队列的基础知识&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法训练1</title>
    <link href="http://example.com/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%831/"/>
    <id>http://example.com/2023/08/11/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%831/</id>
    <published>2023-08-11T03:14:00.000Z</published>
    <updated>2023-09-17T05:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法训练1——栈"><a href="#算法训练1——栈" class="headerlink" title="算法训练1——栈"></a>算法训练1——栈</h1><h2 id="栈的基础知识"><a href="#栈的基础知识" class="headerlink" title="栈的基础知识"></a>栈的基础知识</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><ol><li>栈（又名：堆栈）是一种只能在一段进行插入或删除操作的线性表（受限的线性表）</li><li>特点：先进后出 （注意：这点与队列不同，队列是先进先出，可以想象成排队）<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210104235434905.png"></li></ol><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><pre><code>1. 栈顶  (Top)：（进出口）表中允许进行插入或删除操作的一端2. 栈底 (Bottom):栈顶和栈底是相对而言的，一端被称作为栈顶，相对的，另一端就被称作为栈底。3. 进栈/入栈（Push）：栈的插入操作。4. 出栈/退栈（Pop）：栈的删除操作。5. 空栈：栈中没有元素/(s-&gt;Top==-1;)6. 满栈：栈中已放满元素/(s-&gt;Top==MaxSize-1)     </code></pre><blockquote><p>注意：栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）        </p></blockquote><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">https://leetcode.cn/problems/implement-queue-using-stacks/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackout;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stackout = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dump();</span><br><span class="line">        <span class="keyword">return</span> stackout.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dump();</span><br><span class="line">        <span class="keyword">return</span> stackout.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackout.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dump</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stackout.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty())&#123;</span><br><span class="line">            stackout.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>用栈模拟队列，此方法是用两个栈来放，一个放进栈的元素，一个放出栈的元素。自定义一个函数，判断目前要包含出栈元素的栈是否为空，不为空则返回，将里面的元素弹出，当为空时，进入while循环，判断包含入栈元素的栈是否为空，若不为空，则将栈顶元素弹出逐步放入出栈，最后在出栈那里实现队列。</p></blockquote><h2 id="判断括号是否有序合法"><a href="#判断括号是否有序合法" class="headerlink" title="判断括号是否有序合法"></a>判断括号是否有序合法</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/valid-parentheses/">https://leetcode.cn/problems/valid-parentheses/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch==<span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch==<span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek()!=ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–原先的解法：</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Character&gt; pairs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">            put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pairs.containsKey(ch)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty() || stack.peek() != pairs.get(ch)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>解法一：原先使用HashMap,使用键和值相对，当字符串长度不是偶数，那绝对不合法，直接返回。然后用左括号和右括号相对的放入HashMap。再定义一个双向队列，遍历字符串，当遇到一个左括号，即搜索HashMap中有无相对应的key，若有，则判断此时栈中是否有为空，若栈中为空，证明无配对，返回false；或者栈中第一个不是HashMap中能与此时的左括号相对应的右括号，也返回false。若HashMap中没有相对应的key，则证明是右括号，则将他放入栈。最后返回栈是否为空，若为空则配对完成，若不为空，则存在多余的或者不合法的括号。</p></blockquote><blockquote><p>–解法二：直接使用双向队列，遇到左括号，就把相应的右括号放进队列，若遇到右括号，则判断此时队列是否为空或者此时的队列的元素跟现在的这个元素不相等，就返回false，若相等，就把队列的元素弹出。</p></blockquote><h2 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(!stack.isEmpty()&amp;&amp;s.charAt(i)==stack.peek())&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            stringBuilder.append(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>使用栈，先遍历字符串，判断栈，如果栈不为空并且目前栈顶的元素等于现在遍历到的字符串元素，则将栈顶元素弹出；若相反，则将元素push进栈中。遍历完成后，用StringBuilder 逐步拼接字符，因为stack是先后出，所有最后得反转字符串。（也可考虑使用队列解决）</p></blockquote><h2 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h2><p>–此时可做 leetcode 的题目<br><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">https://leetcode.cn/problems/evaluate-reverse-polish-notation/</a></p><p>–以下是按照卡哥教的方法写的代码</p><p>代码测试（Java）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(token, <span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">                stack.add(stack.pop() + stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(token, <span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.add(b - a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(token, <span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">                stack.add(stack.pop() * stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(token, <span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                stack.add(b / a);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.add(Integer.valueOf(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–思考：</p><blockquote><p>此时补充一个后缀算数表达式的知识：<br>所谓后缀算数表达式：指的是不包含括号，运算符放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则）。</p></blockquote><blockquote><p>解法思考：使用栈，先遍历字符串数组，若遇到加减乘除，就将栈顶元素弹出两个，进行相应的算法，此时需要注意的是，先弹出的数作为除数和减数，而后弹出的为被除数或被减数。若遇到的不是运算符号，则将数字放入，记得用Integer转换。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法训练1——栈&quot;&gt;&lt;a href=&quot;#算法训练1——栈&quot; class=&quot;headerlink&quot; title=&quot;算法训练1——栈&quot;&gt;&lt;/a&gt;算法训练1——栈&lt;/h1&gt;&lt;h2 id=&quot;栈的基础知识&quot;&gt;&lt;a href=&quot;#栈的基础知识&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/04/hello-world/"/>
    <id>http://example.com/2023/08/04/hello-world/</id>
    <published>2023-08-04T03:20:17.788Z</published>
    <updated>2023-08-04T03:20:17.788Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
